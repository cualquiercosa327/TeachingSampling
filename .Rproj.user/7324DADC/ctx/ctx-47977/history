# The remaining columns estimates the size of the categories
# of Zone within the corresponding category of SPAM
# Finnaly, note that the sum of the point estimates of the last
# two columns gives exactly the point estimate in the second column
E.SI(N,n,SPAM.no)
# Before running the following lines, notice that:
# The first column always indicates the population size
# The second column is an estimate of the size of the
# second category in the domain SPAM
# The remaining columns estimates the size of the categories
# of Zone within the corresponding category of SPAM
# Finnaly, note that the sum of the point estimates of the last two
# columns gives exactly the point estimate in the second column
E.SI(N,n,SPAM.yes)
Lucy <- BL[1:85296,]
setwd("/Users/psirusteam/Desktop/Dropbox/Producción/Software/Teaching Sampling/Big Lucy")
system.time(
BL<-read.table("BigLucy20.txt", header=TRUE)
)
head(BL)
names(BL)
nrow(BL)
Lucy <- BL[1:85296,]
summary(Lucy)
nrow(Lucy)
levels(Lucy$Zone)
sum(table(Lucy$Zone))
min(table(BigLucy$Zone))
head(BL)
names(BL)
nrow(BL)
BigLucy <- BL[1:85296,]
summary(BigLucy)
nrow(BigLucy)
levels(BigLucy$Zone)
sum(table(BigLucy$Zone))
min(table(BigLucy$Zone))
summary(table(BigLucy$Zone))
max(table(BigLucy$Zone))
rep(1:10)
rep(1:10, 1:10)
rep(1:10, 10)
rep(1:4, 10)
seq(1:4, 10)
seq(1,4, 10)
seq(1,4)
rep(1, 10)
?rep
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:4, each = 5)
rep(1:10, length.out = 5)
rep(1:10, length.out = 50)
rep(1:10, each = 2, length.out = 50)
rep(1:17, each = 10, length.out = 165)
ceiling(165/10)
i=1
table(BigLucy$Zone)[1]
table(BigLucy$Zone)[1]=2
table(BigLucy$Zone)[1]+2
summary(BigLucy)
nrow(BigLucy)
levels(BigLucy$Zone)
sum(table(BigLucy$Zone))
min(table(BigLucy$Zone))
max(table(BigLucy$Zone))
Segments <- c()
for(i in 1:99){
N <- table(BigLucy$Zone)[i]
NI <- ceiling(N/10)
Segments <- c(Segments, rep(1:NI, each = 10, length.out = N))
}
length(Segments)
nrow(BigLucy)
levels(BigLucy$Zone)
Segments <- c()
for(i in 1:100){
N <- table(BigLucy$Zone)[i]
NI <- ceiling(N/10)
Segments <- c(Segments, rep(1:NI, each = 10, length.out = N))
}
length(Segments)
head(Segments)
paste(1,2)
Lucy$Segments <- paste(Lucy$Zone, Segments)
head(Lucy)
View(Lucy)
i=2
N <- table(BigLucy$Zone)[i]
N
NI <- ceiling(N/10)
NI
c(Segments, rep(1:NI, each = 10, length.out = N))
rep(1:NI, each = 10, length.out = N)
BigLucy <- BL[1:85296,]
Segments <- c()
for(i in 1:100){
N <- table(BigLucy$Zone)[i]
NI <- ceiling(N/10)
Segments <- c(Segments, rep(1:NI, each = 10, length.out = N))
}
Segments[1:100]
Segments[1:1000]
table(BigLucy$Zone)[i]
table(BigLucy$Zone)
table(BigLucy$Zone)[1]
table(BigLucy$Zone)[2]
names(BigLucy$Zone)
levels(BigLucy$Zone)
as.numeric(levels(BigLucy$Zone))
as.double(levels(BigLucy$Zone))
as.character(levels(BigLucy$Zone))
substring(levels(Lucy$Zone), first=1)
qq = levels(BigLucy$Zone)
qq
is(qq)
qq <- as.vector(qq)
qq
substring(qq, first=4)
substring(qq, first=6)
substring(qq, first=7)
aa = substring(qq, first=7)
aa
as.numeric(aa)
aa = substring(qq, first=7)
mean(aa)
aa
aa = as.numeric(aa)
aa
mean(aa)
qq <- levels(BigLucy$Zone)
aa <- substring(qq, first=7)
aa <- as.numeric(aa)
Segments <- c()
for(i in 1:aa){
N <- table(BigLucy$Zone)[i]
NI <- ceiling(N/10)
Segments <- c(Segments, rep(1:NI, each = 10, length.out = N))
}
Segments <- c()
for(i in aa){
N <- table(BigLucy$Zone)[i]
NI <- ceiling(N/10)
Segments <- c(Segments, rep(1:NI, each = 10, length.out = N))
}
length(Segments)
Lucy$Segments <- paste(Lucy$Zone, Segments)
View(Lucy)
level(BigLucy$Zone)[1]
levels(BigLucy$Zone)[1]
levels(BigLucy$Zone)[2]
Segments <- c()
Counties <- c()
for(i in aa){
N <- table(BigLucy$Zone)[i]
NI <- ceiling(N/10)
Counties <- c(Counties, rep(levels(BigLucy$Zone)[2], N))
Segments <- c(Segments, rep(1:NI, each = 10, length.out = N))
}
length(Segments)
length(Counties)
Lucy$Zone <- Counties
Lucy$Segments <- paste(Lucy$Zone, Segments)
View(Lucy)
table(BigLucy$Zone)[1]
Segments <- c()
Counties <- c()
for(i in aa){
N <- table(BigLucy$Zone)[i]
NI <- ceiling(N/10)
Counties <- c(Counties, rep(levels(BigLucy$Zone)[i], N))
Segments <- c(Segments, rep(1:NI, each = 10, length.out = N))
}
length(Segments)
length(Counties)
BigLucy$Zone <- Counties
BigLucy$Segments <- paste(BigLucy$Zone, Segments)
View(BigLucy)
View(BigLucy[2:2000,])
View(BigLucy[2000:3000,])
save(BigLucy, file="Lucy.RData")
getwd()
save(BigLucy, file="BigLucy.RData")
setwd("/Users/psirusteam/Desktop/Dropbox/Producción/Software/Teaching Sampling/v. 1.7.9/TeachingSampling/data")
Lucy <- read.table("Lucy.txt", header=T)
save(Lucy, file="Lucy.RData")
setwd("/Users/psirusteam/Desktop/Dropbox/Producción/Software/Teaching Sampling/Big Lucy")
system.time(
BL<-read.table("BigLucy20.txt", header=TRUE)
head(BL)
names(BL)
system.time(
BL<-read.table("BigLucy20.txt", header=TRUE)
head(BL)
system.time(
BL<-read.table("BigLucy20.txt", header=TRUE)
)
library(TeachingSampling)
system.time(data(Lucy))
system.time(data(BigLucy))
data(BigLucy)
attach(BigLucy)
head(BIgLucy)
head(BigLucy)
levels(Segments)
#' # Example 1 with Lucy data #
#' ############################
#'
#' data(Lucy)
#' data(Lucy)
data(BigLucy)
attach(BigLucy)
N <- nrow(BigLucy)
y <- Income
cl <- Zone
ICC(y,cl)
library("samplesize4surveys", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
data(BigLucy)
attach(BigLucy)
N <- nrow(BigLucy)
y <- Income
cl <- Zone
ICC(y,cl)
y <- Income
cl <- Segments
ICC(y,cl)
y <- Taxes
cl <- Segments
ICC(y,cl)
y <- Taxes
cl <- Zone
ICC(y,cl)
y <- Taxes
cl <- Segments
ICC(y,cl)
rho = ICC(y,cl)$ICC
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=10, rho)
NI <- length(levels(Segments))
NI
y <- Taxes
cl <- Zone
ICC(y,cl)
y <- Taxes
cl <- Segments
rho = ICC(y,cl)$ICC
rho
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=10, rho)
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=1, rho)
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.3, M=N/NI, by=1, rho)
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.5, rme=0.3, M=N/NI, by=1, rho)
N
boxplot(y~cl)
N <- nrow(BigLucy)
NI <- length(levels(Segments))
y <- Taxes
cl <- Zone
ICC(y,cl)
boxplot(y~cl)
cl <- Zone
rho = ICC(y,cl)$ICC
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.5, rme=0.3, M=N/NI, by=1, rho)
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.3, M=N/NI, by=1, rho)
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=1, rho)
NI <- length(levels(Zone))
y <- Taxes
cl <- Zone
rho = ICC(y,cl)$ICC
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=1, rho)
NI
M
M=N/NI
M
N/8500
ss2s4m <- function(N, mu, sigma, conf=0.95, rme=0.03, M, by, rho){
mseq <- seq(1,M, by=by)
NIseq <- rep(NA, times=length(mseq))
Deffseq <- rep(NA, times=length(mseq))
n2seq <- rep(NA, times=length(mseq))
for(i in 1: length(mseq)){
Deffseq[i] = 1 + (mseq[i] - 1) * rho
n2seq[i] = ss4m(N, mu=mu, sigma=sigma, DEFF=Deffseq[i], conf=conf, rme=rme)$n.rme
NIseq[i] <- ceiling(n2seq[i]/mseq[i])
}
result <- data.frame("Deff"=Deffseq, "NI"=NIseq, "m"=mseq, "n2s"=n2seq)
result
}
data(BigLucy)
attach(BigLucy)
N <- nrow(BigLucy)
NI <- length(levels(Zone))
y <- Taxes
cl <- Zone
ICC(y,cl)
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=1, rho)
N <- nrow(BigLucy)
NI <- length(levels(Zone))
M=N/NI
N;NI;M
y <- Taxes
cl <- Zone
ICC(y,cl)
rho = ICC(y,cl)$ICC
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=1, rho)
N;NI;M
N <- nrow(BigLucy)
NI <- length(levels(Segments))
M=N/NI
N;NI;M
y <- Taxes
cl <- Segments
rho = ICC(y,cl)$ICC
rho = ICC(y,cl)$ICC
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=1, rho)
ss2s4m <- function(N, mu, sigma, conf=0.95, rme=0.03, M, by, rho){
mseq <- seq(1,M, by=by)
NIseq <- rep(NA, times=length(mseq))
Deffseq <- rep(NA, times=length(mseq))
n2seq <- rep(NA, times=length(mseq))
for(i in 1: length(mseq)){
Deffseq[i] = 1 + (mseq[i] - 1) * rho
n2seq[i] = ss4m(N, mu=mu, sigma=sigma, DEFF=Deffseq[i], conf=conf, rme=rme)$n.rme
NIseq[i] <- ceiling(n2seq[i]/mseq[i])
}
result <- data.frame("Deff"=Deffseq, "NI"=NIseq, "m"=mseq, "n2s"=n2seq)
result.adj <- result[(result$NI <= M),]
result.adj
}
ss2s4m(N=100000, mu=10, sigma=2, conf=0.95, rme=0.03, M=50, by=5, rho=0.01)
# Population size
N <- 1000000
# Number of clusters in the population
NI <- 1000
# Number of elements per cluster
N/NI
# The variable of interest
y <- c(1:N)
# The clustering factor
cl <- rep(1:NI, length.out=N)
rho = ICC(y,cl)$ICC
rho
boxplot(y~cl)
ss2s4m(N, mu=mean(y), sigma=sd(y), conf=0.95, rme=0.03, M=N/NI, by=10, rho)
ss2s4m(N=100000, mu=10, sigma=2, conf=0.95, rme=0.03, M=50, by=5, rho=0.01)
ss2s4m(N=1000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=50, by=5, rho=0.01)
ss2s4m(N=1000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=50, by=5, rho=-0.01)
ss2s4m(N=10000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=50, by=5, rho=0.01)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=50, by=5, rho=0.01)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=5, rho=0.01)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=5, rho=0.01)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=50, rho=0.01)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=50, rho=0.1)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=50, rho=0.2)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=50, rho=0.5)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=50, rho=0.4)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=1, rho=0.4)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=1, rho=0.3)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=1, rho=0.35)
ss2s4m(N=100000000, mu=600000, sigma=500000, conf=0.95, rme=0.03, M=1000, by=1, rho=0.34)
library(TeachingSampling)
################################
# Example 1 with BigLucy data #
################################
data(BigLucy)
attach(BigLucy)
N <- nrow(BigLucy)
NI <- length(levels(Zone))
M=N/NI
N;NI;M
y <- Income
cl <- Zone
rho = ICC(y,cl)$ICC
library(TeachingSampling)
library(TeachingSampling)
PikHol
library(TeachingSampling)
devtools::load_all()
devtools::use_testthat()
install.packages("testthat")
install.packages("testthat")
devtools::use_testthat()
devtools::use_testthat()
library(TeachingSampling)
devtools::build_win()
library(TeachingSampling)
devtools::use_data(BigLucy, BigLucy)
devtools::use_data(BigLucy, BigLucy)
library(TeachingSampling)
data("BigLucy")
devtools::use_data(BigLucy, BigLucy)
data("Lucy")
devtools::use_data(Lucy, Lucy)
pryr::mem_used()
install.packages("pryr")
pryr::mem_used()
library("pryr")
pryr::mem_used()
devtools::create()
?devtools::create()
?devtools::?create()
devtools::?create()
?create()
getwd()
devtools::?create(getwd())
devtools::create(getwd())
devtools::create("/d")
devtools::create("/ddd")
TeachingSampling::Deltakl()
SS4S::
SS4S::d
ss4s::d
samplesize4surveys::e4p()
devtools::build_win()
devtools::build_win()
devtools::build_win()
library(TeachingSampling)
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build_win()
devtools::build_win()
library(TeachingSampling)
library(TeachingSampling)
PikSTPPS <- function(S, x, nh){
S <- as.factor(S)
S <- as.factor(as.integer(S))
pik <- matrix(NA, nrow = length(x), ncol = 1)
cum <- cumsum(nh)
for(k in 1:length(nh)){
h <- which(S == k)
pik.h <- PikPPS(nh[k], x[h])
pik[h, ] <- pik.h
}
pik
}
U <- c("Yves", "Ken", "Erik", "Sharon", "Leslie")
# The auxiliary information
x <- c(52, 60, 75, 100, 50)
# Vector Strata contains an indicator variable of stratum membership
Strata <- c("A", "A", "A", "B", "B")
# Then sample size in each stratum
nh <- c(2,2)
# Draws a stratified PPS sample with replacement of size n=4
Pik <- PikSTPPS(Strata, x, nh)
Pik
# Some checks
sum(Pik)
data(Lucy)
attach(Lucy)
# Level is the stratifying variable
summary(Level)
# Defines the size of each stratum
N1<-summary(Level)[[1]]
N2<-summary(Level)[[2]]
N3<-summary(Level)[[3]]
N1;N2;N3
# Defines the sample size at each stratum
n1<-70
n2<-100
n3<-200
nh<-c(n1,n2,n3)
nh
# Computes the inclusion probabilities for the stratified population
S <- Level
x <- Employees
pik <- PikSTPPS(S, x, nh)
# Some checks
sum(Pik)
nh
S <- Level
x <- Employees
pik <- PikSTPPS(S, x, nh)
PikSTPPS(S, x, nh)
sum(Pik)
Pik <- PikSTPPS(S, x, nh)
# Some checks
sum(Pik)
sum(nh)
devtools::document()
?.
?
.
library(TeachingSampling)
library(TeachingSampling)
library(TeachingSampling)
library(TeachingSampling)
parseNamespaceFile()
?parseNamespaceFile()
library(pkgconfig)
library(pkg)
install.packages("pkg")
loadedNamespaces(TeachingSampling)
loadedNamespaces("TeachingSampling")
library(TeachingSampling)
library(TeachingSampling)
devtools::document()
devtools::document()
devtools::document()
library(TeachingSampling)
devtools::document()
library(TeachingSampling)
E.BE
library(TeachingSampling)
install.packages("roxygen2")
install.packages("rmarkdown")
packageVersion('rmarkdown')
install.packages("rmarkdown")
packageVersion('rmarkdown')
rmarkdown::pandoc_version()
library(TeachingSampling)
